from aiogram import Router, F, html
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums.dice_emoji import DiceEmoji
import asyncio
import logging
from aiogram.types import LinkPreviewOptions
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.client.session.aiohttp import AiohttpSession
import aiohttp
import ssl
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile, ReplyKeyboardMarkup
import random
from aiogram.utils.keyboard import InlineKeyboardBuilder
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.formatting import Text, Bold
from keyboard import get_yes_no_kb



TOKEN = 
session = AiohttpSession()
session._connector_init = {'ssl': False}
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML), session=session)
# PROXY_URL = 

logging.basicConfig(level=logging.INFO)
dp = Dispatcher()

router = Router()

@router.message(Command("—Ç–µ—Å—Ç"))  # [2]
async def cmd_start(message:Message):
    await message.answer(
        "–í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–∞–π/—É—á—ë–±–æ–π   \n/–¥–∞|/–Ω–µ—Ç",
         reply_markup=get_yes_no_kb()
)
@router.message(F.text.lower() == "–¥–∞")
async def answer_yes(message: Message):
    await message.answer(
        "–ù–µ —Ö–≤–∞—Å—Ç–∞–π—Å—è!",
        reply_markup=ReplyKeyboardRemove()
)

@router.message(F.text.lower() == "–Ω–µ—Ç")
async def answer_yes(message: Message):
    await message.answer(
        "–ñ–∞–ª—å... \n –∏–¥–∏ –ø–æ–µ—à—å —á—Ç–æ –ª–∏",
        reply_markup=ReplyKeyboardRemove()
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Å–ª–∞–≤—è–Ω—Å–∫–æ–º —à–æ–ø–µ ''–¢–∏—Ö–∏–π –æ–º—É—Ç'', –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø–∏—à–∏ /–∫–æ–º–∞–Ω–¥—ã")

@dp.message(Command("–∫–æ–º–∞–Ω–¥—ã"))
async def cmd_help(message: types.Message):
    await message.answer("\n –•–æ—Ç–∏—Ç–µ —à—É—Ç–∫—É? –Ω–∞–ø–∏—à–∏—Ç–µ /–∞–Ω–µ–∫–¥–æ—Ç \n –µ—â—ë –µ—Å—Ç—å —Ç–µ—Å—Ç—ã /—Ç–µ—Å—Ç /—Ç–µ—Å—Ç1 | /go\n /–∫—É–±–∏–∫ /–≤–æ–ø—Ä–æ—Å /—Ü–∏—Ñ–µ—Ä–∫–∏ /—Å—Å—ã–ª–æ—á–∫–∏ \n /–≥–∏—Ñ–∫–∞ /–∫–∞—á–µ–ª–∏ /random \n /–ø—Ä–∏–≤–µ—Ç (–ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º)" )

@dp.message(Command("–∞–Ω–µ–∫–¥–æ—Ç"))
async def cmd_start(message: types.Message):
    await message.answer("\n–ü—Ä–æ—Å—Ç–∏—Ç–µ, –º–∏–º–æ –≤–∞—Å –Ω–µ –ø—Ä–æ–±–µ–≥–∞–ª–æ —Å—Ç–∞–¥–æ –±–∞—Ä–∞–Ω–æ–≤?\n–ß—ë –æ—Ç—Å—Ç–∞–ª?")

@dp.message(Command("—Ç–µ—Å—Ç1"))
async def cmd_test1(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤ –Ω–µ –±—É–¥–µ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–ª")

async def cmd_test2(message: types.Message):
    await message.answer("–¢–ï–°–¢–û–í –ù–ï –ë–£–î–ï–¢! \nthere will be no tests! \nes wird keine Tests geben!")

#—Å—Ç–∏–∫–µ—Ä—ã
@dp.message(Command("–∫—É–±–∏–∫"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

#—Å—É–ø–µ—Ä –≤–∞–∂–∞—è —Ç–µ–º–∞
@dp.message(Command("–≤–æ–ø—Ä–æ—Å"))
async def cmd_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π"),
            types.KeyboardButton(text="–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )
    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)

@dp.message(F.text.lower() == "—Å –ø—é—Ä–µ—à–∫–æ–π")
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")

@dp.message(F.text.lower() == "–±–µ–∑ –ø—é—Ä–µ—à–∫–∏")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!")

#—Ç—ã–∫–∞–ª–∫–∞ –Ω–∞ —Ü–∏—Ñ–µ—Ä–∫–∏
@dp.message(Command("—Ü–∏—Ñ–µ—Ä–∫–∏"))
async def reply_builder(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 17):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(4)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )
#–≤—ã–¥–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏
@dp.message(Command("—Å—Å—ã–ª–æ—á–∫–∏"))
async def cmd_links(message: Message):
    links_text = (
        "https://youtu.be/P3YFIRDifQU?si=f_7Jak8r84J2Wgpe"
        "\n"
        "https://t.me/telegram"
    )
    options_1 = LinkPreviewOptions(is_disabled=True)
    await message.answer(
        f"–ù–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫\n{links_text}",
        link_preview_options=options_1
    )
#–≥–∏—Ñ–∫–∞
my_gif = FSInputFile("lol.gif")
@dp.message(Command("–≥–∏—Ñ–∫–∞"))
async def send_gif(message: types.Message):
    await message.answer_animation(my_gif)
    await asyncio.sleep(2)

@dp.message(Command("random"))
async def cmd_random(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∂–º–∏ –º–µ–Ω—è",
        callback_data="random_value")
    )
    await message.answer(
        "–ï–°–õ–ò –í–´–ü–ê–õ–û –ß–ò–°–õ–û –ë–û–õ–¨–®–ï 95 –í–´ –ì–ï–ô",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "random_value")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(str(random.randint(1, 100)))

user_data = {}

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
            types.InlineKeyboardButton(text="+1", callback_data="num_incr")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def update_num_text(message: types.Message, new_value: int):
    await message.edit_text(
        f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
        reply_markup=get_keyboard()
    )

#—á–∏—Å–ª–∞ +1 –∏–ª–∏ –º–∏–Ω—É—Å 1. –≤—ã–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@dp.message(Command("–∫–∞—á–µ–ª–∏"))
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard())

@dp.callback_query(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery):
    user_value = user_data.get(callback.from_user.id, 0)
    action = callback.data.split("_")[1]

    if action == "incr":
        user_data[callback.from_user.id] = user_value+1
        await update_num_text(callback.message, user_value+1)
    elif action == "decr":
        user_data[callback.from_user.id] = user_value-1
        await update_num_text(callback.message, user_value-1)
    elif action == "finish":
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")

    await callback.answer()

async def update_num_text(message: types.Message, new_value: int):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
            reply_markup=get_keyboard()
        )
#–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ 
@dp.message(Command("–ø—Ä–∏–≤–µ—Ç"))
async def cmd_hello(message: Message):
    content = Text(
        "–ó–¥–∞—Ä–æ–≤–∞, –µ–±–∞—Ç—å –º–æ–π –ª—ã—Å—ã–π —Ä–æ–±–æ—Ç–∏—á–µ—Å–∫–∏–π —á–µ—Ä–µ–ø ",
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()
    )

#–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, —Ç—É—Ç –±–µ–∑ 100 –≥—Ä –∫–æ–ª—ã –Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
current_answer = 0
score = 0

@dp.message(Command("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"))
async def cmd_qviz(message: types.Message):
    global current_answer, score
    current_answer = 0
    score = 0  #–Ω–∞ —ç—Ç–æ–º —è –≤—Å—ë, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–¥–æ–ª–µ–ª–∞ –º–µ–Ω—è, 

async def main():
    sslcontext = ssl.create_default_context()
    sslcontext.check_hostname = False
    sslcontext.verify_mode = ssl.CERT_NONE

    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=sslcontext)) as session:
        await dp.start_polling(bot)
dp.message.register(cmd_test2, Command("—Ç–µ—Å—Ç2"))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')

